# if statement
snippet if
	if (${1}) begin
		${0}
	end
# If/else statements
snippet ife
	if (${1}) begin
		${2}
	end
	else begin
		${3}
	end
# Else if statement
snippet eif
	else if (${1}) begin
		${0}
	end
#Else statement
snippet el
	else begin
		${0}
	end
# While statement
snippet wh
	while (${1}) begin
		${0}
	end
# Repeat Loop
snippet rep
	repeat (${1}) begin
		${0}
	end
# Case statement
snippet case
	case (${1:/* variable */})
		${2:/* value */}: begin
			${3}
		end
		default: begin
			${4}
		end
	endcase
# CaseZ statement
snippet casez
	casez (${1:/* variable */})
		${2:/* value */}: begin
			${3}
		end
		default: begin
			${4}
		end
	endcase
# Always block
snippet al
	always @(${1:/* sensitive list */}) begin
		${0}
	end
# Module block
snippet mod
	module ${1:`vim_snippets#Filename('$1', 'name')`} (${2});
		${0}
	endmodule
# For
snippet for
	for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) begin
		${4}
	end
# Forever
snippet forev
	forever begin
		${0}
	end
# Function
snippet fun
	function ${1:void} ${2:name}(${3});
		${0}
	endfunction: $2
# Task
snippet task
	task ${1:name}(${2});
		${0}
	endtask: $1
# Initial 
snippet ini
	initial begin
		${0}
	end
# typedef struct packed
snippet tdsp
	typedef struct packed {
		int ${2:data};
	} ${1:`vim_snippets#Filename('$1_t', 'name')`};
# typedef eum
snippet tde
	typedef enum ${2:logic[15:0]}
	{
		${3:REG = 16'h0000}
	} ${1:my_dest_t};
# Module 
snippet	!mod
	module	${0:`vim_snippets#Filename('$1', 'name')`}
	#(	
		parameter	PARAM0	= 0,
		parameter	PARAM1	= 1,
		parameter	PARAM2	= 2
	)
	(	
		output reg	[ 31:0]		o_out,
		output reg				o_valid,
		input		[ 31:0]		i_in,
		input					i_clk,
		input					i_rst
	);

	endmodule

snippet	tb
	// --------------------------------------------------
	//	Define Global Variables
	// --------------------------------------------------
	//	Clock
	\`define	CLKFREQ		100					// Unit: MHz
	\`define	SIMCYCLE	100
	//	Multibit
	\`define NBIT		8
	//	Fixed-Point Number
	\`define NBIT_I		8					// Integer Part
	\`define NBIT_F		8					// Fractional Part
	\`define NBIT_T		\`NBIT_I+\`NBIT_F

	\`include	"${0:`vim_snippets#Filename('$1', 'name')`}.v"
	module	${1:`vim_snippets#Filename('$1', 'name')`};
	// --------------------------------------------------
	//	Instanciation
	// --------------------------------------------------

	// --------------------------------------------------
	//	Clock
	// --------------------------------------------------
		initial					i_clk	= 1'b1   ;
		always	#(500/\`CLKFREQ)	i_clk	= ~i_clk ;

	// --------------------------------------------------
	//	Test Bench
	// --------------------------------------------------
		integer		i, j;
		initial begin
			for (i=0; i<\`SIMCYCLE; i++) begin
			end
			\$finish;
		end

	endmodule

snippet dump
	reg	[8*32-1:0]	vcd_file;
	initial begin
		if (\$value$plusargs("vcd_file=%s", vcd_file)) begin
			\$dumpfile(vcd_file);
			\$dumpvars;
		end
	end
snippet utils
	task dispAsFixedPoint;
		input reg	[127:0]					sDescription;
		input		[\`DEF_BIT_FULL-1:0]	bIn;
		begin
			\$display("[\%0s] Binary: \%b > Fixed Point Number: \%f", sDescription, bIn, bIn*(2.0**-(\`DEF_BIT_FRAC)));
		end
	endtask
